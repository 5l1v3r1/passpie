from tempfile import mkdtemp, NamedTemporaryFile
import re
import os

from .proc import run
from .utils import which, yaml_load, logger


DEFAULT_GPG_HOMEDIR = os.path.expanduser('~/.gnupg')
DEVNULL = open(os.devnull, 'w')
DEFAULT_KEY_LENGTH = 4096
DEFAULT_EMAIL = "passpie@localhost"
DEFAULT_NAME = "Passpie"
DEFAULT_COMMENT = "Generated by Passpie"
DEFAULT_EXPIRE_DATE = 0
KEY_INPUT = u"""Key-Type: RSA
Key-Length: {}
Subkey-Type: RSA
Name-Comment: {}
Passphrase: {}
Name-Real: {}
Name-Email: {}
Expire-Date: {}
%commit
"""


def make_key_input(**kwargs):
    kwargs.setdefault("key_length", DEFAULT_KEY_LENGTH)
    kwargs.setdefault("name", DEFAULT_NAME)
    kwargs.setdefault("email", DEFAULT_EMAIL)
    kwargs.setdefault("comment", DEFAULT_COMMENT)
    kwargs.setdefault("expire_date", DEFAULT_EXPIRE_DATE)
    key_input = KEY_INPUT.format(
        kwargs["key_length"],
        kwargs["comment"],
        kwargs["passphrase"],
        kwargs["name"],
        kwargs["email"],
        kwargs["expire_date"],
    )
    return key_input, kwargs


def list_keys(homedir, emails=False):
    command = [
        which("gpg2", "gpg"),
        '--no-tty',
        "--batch",
        '--fixed-list-mode',
        '--with-colons',
        "--homedir", homedir,
        "--list-keys",
        "--fingerprint",
    ]
    response = run(command)
    keys = []
    for line in response.std_out.splitlines():
        if emails is True:
            mobj = re.search(r'uid:.*?<(.*?@.*?)>:', line)
        else:
            mobj = re.search(r'fpr:.*?(\w+):', line)
        if mobj:
            found = mobj.group(1)
            keys.append(found)
    return keys


def export_keys(homedir, fingerprint=""):
    command = [
        which('gpg2', 'gpg'),
        '--no-tty',
        '--batch',
        '--homedir', homedir,
        '--export',
        '--armor',
        fingerprint,
    ]
    command_secret = [
        which('gpg2', 'gpg'),
        '--no-tty',
        '--batch',
        '--homedir', homedir,
        '--export-secret-keys',
        '--armor',
        fingerprint,
    ]
    ret = run(command)
    ret_secret = run(command_secret)
    return ret.std_out + ret_secret.std_out


def generate_keys(values):
    homedir = mkdtemp()
    command = [
        which('gpg2', 'gpg'),
        '--batch',
        '--no-tty',
        '--homedir', homedir,
        '--gen-key',
    ]
    recipient = values.get("email", DEFAULT_EMAIL)
    key_input, _ = make_key_input(**values)
    run(command, data=key_input)
    return export_keys(homedir, recipient)


def encrypt_data(data, recipient, homedir):
    command = [
        which('gpg2', 'gpg'),
        '--batch',
        '--no-tty',
        '--always-trust',
        '--armor',
        '--recipient', recipient,
        '--homedir', homedir,
        '--encrypt'
    ]
    ret = run(command, data=data)
    return ret.std_out


def decrypt_data(data, recipient, homedir, passphrase):
    command = [
        which('gpg2', 'gpg'),
        '--batch',
        '--no-tty',
        '--always-trust',
        '--recipient', recipient,
        '--homedir', homedir,
        '--passphrase', passphrase,
        '-o', '-',
        '-d', '-',
    ]
    response = run(command, data=data)
    return response.std_out


def import_keys(keyspath, homedir):
    cmd = (
        which('gpg2', 'gpg'),
        "--no-tty",
        "--batch",
        "--homedir", homedir,
        '--allow-secret-key-import',
        "--import", keyspath,
    )
    response = run(cmd)
    return response


def setup_homedir(homedir, keys):
    if keys:
        homedir = mkdtemp()
        for key in keys:
            keysfile = NamedTemporaryFile(delete=False, dir=homedir, suffix=".asc")
            keysfile.write(key.encode("utf-8"))
            import_keys(keysfile.name, homedir)
        is_temp = True
    elif homedir:
        is_temp = False
    else:
        raise ValueError("Homedir not set and keys not found, set PASSPIE_GPG_HOMEDIR")
    return homedir, is_temp


def load_keys(keys_path):
    try:
        homedir = mkdtemp()
        import_keys(keys_path, homedir)
        return homedir
    except ValueError:
        return None


class GPG(object):
    """Class to hold gpg encryption, decryption and handle keys in homedir"""

    def __init__(self, keys_path, recipient, default_homedir):
        self.keys_path = keys_path
        self.recipient = recipient
        self.default_homedir = default_homedir
        self.temp_homedir = load_keys(self.keys_path)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

    @property
    def path(self):
        homedir = self.temp_homedir or self.default_homedir
        if not homedir:
            raise RuntimeError("Homedir not set and keys not found, set PASSPIE_GPG_HOMEDIR")
        elif os.path.exists(homedir) is False:
            raise RuntimeError(
                "Homedir path not found at '{}', set PASSPIE_GPG_HOMEDIR".format(homedir)
            )
        return homedir

    def list_keys(self, emails=True):
        """List keys in self.homedir"""
        return list_keys(self.path, emails=emails)

    def export(self):
        """Export key in self.path as a list of armored strings"""
        keys = []
        for fingerprint in self.list_keys(emails=False):
            keyasc = export_keys(self.path, fingerprint)
            keys.append(keyasc)
        return keys

    def encrypt(self, data):
        """Encrypt data using recipient and homedir set"""
        return encrypt_data(data, self.recipient, self.path)

    def decrypt(self, data, passphrase):
        """Decrypt data using recipient and homedir set"""
        return decrypt_data(data, self.recipient, self.path, passphrase)

    def ensure(self):
        """Check if values are set as expected"""
        # Test recipient
        if self.recipient not in (self.list_keys() + self.list_keys(False)):
            message = "Recipient '{}' not found in homedir".format(self.recipient)
            raise ValueError(message)

        # Test passphrase
        if self.passphrase:
            if not self.decrypt(self.encrypt("OK")) == "OK":
                raise ValueError("Wrong passphrase")
        else:
            raise ValueError("Passphrase not set")
