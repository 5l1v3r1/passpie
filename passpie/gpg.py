import os
import re
from tempfile import NamedTemporaryFile, mkdtemp

from . import process
from .utils import which, mkdir
from ._compat import *


GPG_HOMEDIR = os.path.expanduser('~/.gnupg')
DEVNULL = open(os.devnull, 'w')
KEY_INPUT = u"""Key-Type: RSA
Key-Length: {}
Subkey-Type: RSA
Name-Comment: Auto-generated by Passpie
Passphrase: {}
Name-Real: Passpie
Name-Email: passpie@local
Expire-Date: 0
%commit
"""


def ensure_keys(path):
    keys_path = os.path.join(os.path.expanduser(path), '.keys')
    if os.path.isfile(keys_path):
        return keys_path


def make_key_input(passphrase, key_length):
    passphrase = unicode(passphrase)
    key_length = unicode(key_length)
    key_input = KEY_INPUT.format(key_length, passphrase)
    return key_input


def export_keys(homedir, private=False):
    command = [
        which('gpg2') or which('gpg'),
        '--no-version',
        '--batch',
        '--homedir', homedir,
        '--export-secret-keys' if private else '--export',
        '--armor',
        '-o', '-'
    ]
    output, error = process.call(command)
    return output


def create_keys(passphrase, key_length=4096):
    homedir = mkdtemp()
    command = [
        which('gpg2') or which('gpg'),
        '--batch',
        '--no-tty',
        '--no-secmem-warning',
        '--no-permission-warning',
        '--no-mdc-warning',
        '--homedir', homedir,
        '--gen-key',
    ]
    key_input = make_key_input(passphrase, key_length)
    output, error = process.call(command, input=key_input)
    return export_keys(homedir), export_keys(homedir, private=True)


def import_keys(keys_path, homedir):
    command = [
        which('gpg2') or which('gpg'),
        '--no-tty',
        '--batch',
        '--no-secmem-warning',
        '--no-permission-warning',
        '--no-mdc-warning',
        '--homedir', homedir,
        '--import', keys_path
    ]
    output, err = process.call(command)
    return homedir


def get_default_recipient(homedir, secret=False):
    command = [
        which('gpg2') or which('gpg'),
        '--no-tty',
        '--batch',
        '--no-secmem-warning',
        '--no-permission-warning',
        '--no-mdc-warning',
        '--list-{}-keys'.format('secret' if secret else 'public'),
        '--fingerprint',
        '--homedir', homedir,
    ]
    output, _ = process.call(command)
    for line in output.splitlines():
        try:
            mobj = re.search(r'(([0-9A-F]{4}\s*?){10})', line)
            fingerprint = mobj.group().replace(' ', '')
            return fingerprint
        except (AttributeError, IndexError):
            continue
    return ''


def encrypt(data, recipient, homedir):
    command = [
        which('gpg2') or which('gpg'),
        '--batch',
        '--no-tty',
        '--always-trust',
        '--armor',
        '--recipient', recipient,
        '--homedir', homedir,
        '--encrypt'
    ]
    output, _ = process.call(command, input=data)
    return output


def decrypt(data, recipient, passphrase, homedir):
    command = [
        which('gpg2') or which('gpg'),
        '--batch',
        '--no-tty',
        '--always-trust',
        '--recipient', recipient,
        '--homedir', homedir,
        '--passphrase', passphrase,
        '--emit-version',
        '-o', '-',
        '-d', '-',
    ]
    output, _ = process.call(command, input=data)
    return output


class GPG(object):

    def __init__(self, homedir, recipient, passphrase=None):
        self.homedir = homedir
        self.recipient = recipient
        self.passphrase = passphrase

    @classmethod
    def from_keys(cls, public, private, passphrase):
        homedir = mkdtemp()
        keysfile = NamedTemporaryFile()
        with open(keysfile.name, "w") as f:
            f.write(public)
            f.write(private)
        import_keys(keysfile.name, homedir)
        recipient = get_default_recipient(homedir)
        return GPG(homedir, recipient, passphrase)

    def encrypt(self, data):
        return encrypt(data, self.recipient, self.homedir)

    def decrypt(self, data):
        return decrypt(data, self.recipient, self.passphrase, self.homedir)

    def __str__(self):
        return "GPG<{0}@{1}>".format(self.recipient, self.homedir)
