{"name":"Passpie","tagline":"Passpie: manage login credentials from the terminal","body":"# Passpie: Manage login credentials from terminal\r\n\r\n[Passpie](https://marcwebbie.github.io/passpie) lets you manage login credentials from the terminal with a coloroful/configurable cli interface. Password files are saved into yaml text files with passwords as [GnuPG](http://en.wikipedia.org/wiki/GNU_Privacy_Guard) encrypted strings. Use your master passphrase to decrypt login credentials, copy passwords to clipboard and more...\r\n\r\n![Passpie console interface](https://github.com/marcwebbie/passpie/raw/master/images/passpie.png)\r\n\r\n> Passpie is built with [Click](http://click.pocoo.org) and [Tabulate](https://pypi.python.org/pypi/tabulate) for its interface, [TinyDB](https://github.com/msiemens/tinydb) for its database and [python-gnupg](https://github.com/isislovecruft/python-gnupg) for its encryption using *gpg*. Passpie is also inspired by great cli applications like [git](https://github.com/git/git) and [httpie](http://httpie.org/)\r\n\r\n-----\r\n\r\n[![pypi](https://img.shields.io/pypi/v/passpie.svg?style=flat-square&label=latest%20version)](https://pypi.python.org/pypi/passpie)\r\n[![unix_build](https://img.shields.io/travis/marcwebbie/passpie/master.svg?style=flat-square&label=unix%20build)](https://travis-ci.org/marcwebbie/passpie)\r\n[![windows_build](https://img.shields.io/appveyor/ci/marcwebbie/passpie.svg?style=flat-square&label=windows%20build)](https://ci.appveyor.com/project/marcwebbie/passpie)\r\n[![coverage](https://img.shields.io/codecov/c/github/marcwebbie/passpie.svg?style=flat-square&label=coverage)](https://codecov.io/github/marcwebbie/passpie)\r\n\r\n-----\r\n\r\n\r\n## Features\r\n\r\n+ [x] Console interface\r\n+ [x] Manage multiple databases\r\n+ [x] Add, update, remove credentials\r\n+ [x] Copy passwords to clipboard\r\n+ [x] List credentials as a table\r\n+ [x] List credentials with a colored output\r\n+ [x] Search credentials by name, login or comments\r\n+ [x] Search with regular expression\r\n+ [x] Group credentials by name\r\n+ [x] [Configuration](#configuring-passpie-with-passpierc) from file. `~/.passpie`\r\n+ [x] Change passphrase and re-encrypt database\r\n+ [x] Export Passpie database to plain text file\r\n+ [x] Import plain text Passpie database\r\n+ [x] Import credentials from [Pysswords](https://github.com/marcwebbie/pysswords)\r\n+ [x] Randomly generated credential passwords\r\n+ [x] Configurable random password generation\r\n+ [x] Generate database status report\r\n+ [x] Bulk remove credentials\r\n+ [x] Bash/Zsh [completion](#passpie-completion)\r\n+ [x] [Undo/Redo changes](#version-control-your-database) to the database. (requires [git](https://git-scm.com/))\r\n\r\nPlanned features:\r\n\r\n+ [ ] Bulk update credentials\r\n+ [ ] Import plain text credentials from [Keepass](http://keepass.info/)\r\n+ [ ] Import plain text credentials from [1Password](https://agilebits.com/onepassword)\r\n\r\n## Quickstart\r\n\r\n```bash\r\n# initialize a passpie database\r\npasspie init\r\n\r\n# add some credentials\r\npasspie add foo@example.com\r\npasspie add bar@example.com\r\n\r\n# add some credential with random passwords\r\npasspie add bar@github.com --random\r\npasspie add spam@egg --random\r\npasspie add foo@github.com --random\r\npasspie add bar@github.com --random\r\n\r\n# add spam@egg with random password and copy to clipboard\r\npasspie add spam@egg.local --random --copy\r\n\r\n# edit credential \"foo@example.com\"\r\npasspie update foo@example.com\r\n\r\n# copy password from credential \"foo@example.com\" to clipboard\r\npasspie copy foo@example.com\r\n\r\n# search credentials by string \"exam\"\r\npasspie search exam\r\n\r\n# search credentials using regular expressions\r\npasspie search 'foo|bar'\r\n\r\n# remove some credentials\r\npasspie remove foo@example.com\r\npasspie remove foo@github.com\r\n\r\n# see the database change history\r\npasspie log\r\n\r\n# reset to a previous version of the database\r\npasspie --reset-to 5\r\n\r\n# check database status\r\npasspie status\r\n\r\n# print all credentials as a table with hidden passwords\r\npasspie\r\n\r\n# shows help. Option `--help`\r\npasspie --help\r\n```\r\n\r\n## Installation\r\n\r\n### Dependencies\r\n\r\n+ `[Linux, OSX, Windows]` [GnuPG](https://www.gnupg.org/)\r\n+ `[Linux]` [xclip](http://linux.die.net/man/1/xclip) or [xsel](http://linux.die.net/man/1/xsel)\r\n\r\n### Stable version\r\n\r\n#### Using [pip](http://pip.readthedocs.org/en/latest/installing.html)\r\n\r\n```bash\r\npip install passpie\r\n```\r\n\r\n#### On a mac you can install it with [homebrew](http://brew.sh)\r\n\r\n```bash\r\nbrew install passpie\r\n```\r\n\r\n### Development version\r\n\r\nThe **latest development version** can be installed directly from GitHub:\r\n\r\n```bash\r\npip install --upgrade https://github.com/marcwebbie/passpie/tarball/master\r\n```\r\n\r\n## Tutorials\r\n\r\n### Diving into *fullname* syntax\r\n\r\nPasspie credentials are referenced by `fullname`. fullname syntax handles login and name for credentials in one go for faster adding and querying of credentials.\r\n\r\n#### Structure of a fullname\r\n\r\nFullnames are composed of `login`@`name`. Login is optional. If you don't pass any login when adding new credentials, credential login will be replaced by a `_` character:\r\n\r\n```bash\r\npasspie add @banks/mybank --password 1234\r\npasspie add @banks/myotherbank --password 5678\r\n```\r\n\r\nListing credentials:\r\n\r\n```bash\r\n$ passpie\r\n=================  =======  ==========  =========\r\nName               Login    Password    Comment\r\n=================  =======  ==========  =========\r\nbanks/mybank       _        *****\r\nbanks/myotherbank  _        *****\r\n=================  =======  ==========  =========\r\n```\r\n\r\nSince `login` is optional. You can query credentials using only name syntax, for example to update credential `@banks/mybank`:\r\n\r\n```bash\r\npasspie update @banks/mybank --random\r\n```\r\n\r\nOr even better, without using the `@` notation:\r\n\r\n```bash\r\npasspie update banks/mybank --random\r\n```\r\n\r\n### Version control your database\r\n\r\nPasspie by default will create a [git](https://git-scm.com/) repository on database initialization if `git` is available.\r\n\r\n```bash\r\npasspie init\r\n```\r\n\r\nTo see the changes history, use passpie `log` command:\r\n\r\n```bash\r\npasspie log\r\n```\r\n\r\nexample output:\r\n\r\n```text\r\n[13] Updated foo@bar\r\n[12] Updated foo@bar\r\n[11] Reset database\r\n[10] Removed foozy@bar\r\n[9] Updated hello@world\r\n[8] Added hello@world\r\n[7] Added foozy@bar\r\n[6] Updated test@github\r\n[5] Added foozy@bazzy\r\n[4] Updated test@github\r\n[3] Added foo@bar\r\n[2] Added spam@egg\r\n[1] Added test@github\r\n[0] Initialized database\r\n```\r\n\r\n#### Going back to a previous version of the database changes.\r\n\r\nIf you want to go back to a previous version of the database history: `passpie --reset-to N` where N is the index of the change.\r\n\r\n```\r\npasspie log --reset-to 5\r\n```\r\n\r\n> *Attention*: this is an operation that destroys data. Use it with caution. It is equivalent to do `git reset --hard`\r\n\r\n#### Initializing a git repository on an existing passpie database:\r\n\r\n```bash\r\npasspie log --init\r\n```\r\n\r\nor if you have multiple databases:\r\n\r\n```bash\r\npasspie -D other_database log --init\r\n```\r\n\r\n> This will create a git repository on passpie directory and create an initial commit `Initialized database`\r\n\r\n#### Avoiding git initialization\r\n\r\nIf you don't want to create a git repository on the passpie database. Initialize passpie with `--no-git` flag:\r\n\r\n```bash\r\npasspie init --no-git\r\n```\r\n\r\n### Syncing your database\r\n\r\n#### Dropbox\r\n\r\nWith default path `~/.passpie` and a Dropbox shared directory on path `~/Dropbox`\r\n\r\n```bash\r\nmv ~/.passpie ~/Dropbox/passpie    # move passpie db to Dropbox\r\nln -s ~/Dropbox/passpie ~/.passpie # make a link to the db\r\n```\r\n\r\n#### Google Drive\r\n\r\nWith default path `~/.passpie` and a Google Drive shared directory on path `~/GoogleDrive`\r\n\r\n```bash\r\nmv ~/.passpie ~/GoogleDrive/passpie   # move passpie db to Google Drive\r\nln -s ~/GoogleDrive/passpie ~.passpie # make a link to the db\r\n```\r\n\r\n### Exporting a passpie database\r\n\r\n```bash\r\npasspie export passpie.db\r\n```\r\n\r\n### Importing a passpie database\r\n\r\n```bash\r\npasspie import passpie.db\r\n```\r\n\r\n### Grouping credentials by name\r\n\r\nPasspie credentials handles multiple logins for each name which groups credentials by name:\r\n\r\n```bash\r\n# add some credentials\r\npasspie add jonh@example.com --comment \"Jonh main mail\" --random\r\npasspie add doe@example.com --comment \"No comment\" --random\r\n```\r\n\r\nListing credentials:\r\n\r\n```bash\r\n$ passpie\r\n===========  =======  ==========  ===============\r\nname         login    password    comment\r\n===========  =======  ==========  ===============\r\nexample.com  doe      *****       No comment\r\nexample.com  jonh     *****       Jonh main email\r\n===========  =======  ==========  ===============\r\n```\r\n\r\n#### Subgroups\r\n\r\nFullname syntax supports subgrouping of credentials by name\r\n\r\n```\r\npasspie add foo@opensource/github.com --random\r\npasspie add foo@opensource/python.org --random\r\npasspie add foo@opensource/bitbucket.org --random\r\npasspie add foo@opensource/npm.org --random\r\n```\r\n\r\nListing credentials:\r\n\r\n```\r\n$ passpie\r\n========================  =======  ==========  =========\r\nName                      Login    Password    Comment\r\n========================  =======  ==========  =========\r\nopensource/bitbucket.org  foo      *****\r\nopensource/github.com     foo      *****\r\nopensource/npm.org        foo      *****\r\nopensource/python.org     foo      *****\r\n========================  =======  ==========  =========\r\n```\r\n\r\n### Multiple databases\r\n\r\nSometimes it is useful to have multiple databases with different passphrases for higher security. This can be done using `-D` or `--database` option.\r\n\r\n#### Creating databases\r\n\r\n```bash\r\npasspie -D ~/credentials/personal init\r\npasspie -D ~/credentials/work init\r\npasspie -D ~/credentials/junk init\r\n```\r\n\r\n#### Adding passwords to specific database\r\n\r\n```bash\r\npasspie -D ~/credentials/personal add johnd@github.com --random\r\npasspie -D ~/credentials/work add john.doe@example.com --random\r\npasspie -D ~/credentials/junk add fake@example.com --random\r\n```\r\n\r\n#### Listing passwords from specific database\r\n\r\n```bash\r\n$ passpie -D ~/databases/junk\r\n===========  =======  ==========  =========\r\nName         Login    Password    Comment\r\n===========  =======  ==========  =========\r\nexample.com  fake     *****\r\n===========  =======  ==========  =========\r\n```\r\n\r\n### Passpie completion\r\n\r\nYou can activate passpie completion for `bash` or `zsh` shells\r\n\r\n> Check the generated script with `passpie complete {shell_name}`.\r\n\r\n#### bash\r\n\r\nAdd this line to your .bash_profile or .bashrc\r\n\r\n```\r\nif which passpie > /dev/null; then eval \"$(passpie complete bash)\"; fi\r\n```\r\n\r\n#### zsh\r\n\r\nAdd this line to your .zshrc or .zpreztorc\r\n\r\n```\r\nif which passpie > /dev/null; then eval \"$(passpie complete zsh)\"; fi\r\n```\r\n\r\n### Configuring passpie with `.passpierc`\r\n\r\nYou can override default passpie configuration with a `.passpierc` file on your home directory. Passpie configuration files must be written as a valid [yaml](http://yaml.org/) file.\r\n\r\n#### Example `.passpierc`:\r\n\r\n```yaml\r\npath: /Users/john.doe/.passpie\r\nshort_commands: true\r\ngenpass_length: 32\r\ngenpass_symbols: \"_-#|+= \"\r\ntable_format: fancy_grid\r\nheaders:\r\n  - name\r\n  - login\r\n  - password\r\n  - comment\r\ncolors:\r\n  login: green\r\n  name: yellow\r\n  password: cyan\r\n```\r\n\r\n#### Global configuration\r\n\r\n##### `path =`\r\n\r\n**default** ~/.passpie\r\n\r\nPath to passpie database\r\n\r\n##### `short_commands = (true | false)`\r\n\r\n**default** false\r\n\r\nUse passpie commands with short aliases. Like `passpie a` for `passpie add`\r\n\r\n##### `genpass_length =`\r\n\r\n**default:** `32`\r\n\r\nLength of randomly generated passwords with option `--random`\r\n\r\n##### `genpass_symbols =`\r\n\r\n**default:** `\"_-#|+= \"`\r\n\r\nSymbols used on random password generation\r\n\r\n##### `table_format = (fancy_grid | rst | simple | orgtbl | pipe | grid | plain | latex)`\r\n\r\n**default:** `fancy_grid`\r\n\r\nTable format when listing credentials\r\n\r\n##### `headers = (name | login | password | comment | fullname)`\r\n\r\n**default:**\r\n\r\n```\r\nheaders:\r\n  - name\r\n  - login\r\n  - password\r\n  - comment\r\n```\r\n\r\n##### `colors = (green | red | blue | white | cyan | magenta | yellow)`\r\n\r\n**default:**\r\n\r\n```\r\ncolors:\r\n  name: yellow\r\n  login: green\r\n```\r\n\r\n##### `git = (true | false)`\r\n\r\n**default:** true\r\n\r\nCreate a git repository on the database directory when git is available.\r\n\r\n[learn more](#version-control-your-database)\r\n\r\n## Under The Hood\r\n\r\n### Encryption\r\n\r\nEncryption is done with **GnuGPG** using [AES256](http://en.wikipedia.org/wiki/Advanced_Encryption_Standard). Take a look at [passpie.crypt](https://github.com/marcwebbie/passpie/blob/master/passpie/crypt.py) module to know more.\r\n\r\n### Database Path\r\n\r\nThe default database path is at `~/.passpie`. If you want to change the database path, add `--database` option to passpie. Together with `init` you can create arbitrary databases.\r\n\r\n```bash\r\npasspie --database \"/path/to/another/database/\" init\r\n```\r\n\r\n### Database structure\r\n\r\nPasspie database is structured in a directory hierachy. Every\r\ncredential is a `.pass` file inside a directory named after a credential group.\r\n\r\nAn empty database would look like this:\r\n\r\n```bash\r\npasspie --database /tmp/passpie init\r\n\r\ntree /tmp/passpie -la\r\n# /tmp/passpie\r\n# └── .keys\r\n```\r\n\r\nAfter adding a new credential the database would look like this:\r\n\r\n```bash\r\npasspie --database /tmp/passpie add octocat@github.com\r\n# Password: **********\r\n\r\ntree /tmp/passpie -la\r\n# /tmp/passpie\r\n# ├── .keys\r\n# └── github.com\r\n#     └── octocat.pass\r\n```\r\n\r\nIf we add more credentials to group github.com. Directory structure would be:\r\n\r\n```bash\r\npasspie --database /tmp/passpie add octocat2@github.com\r\n# Password: **********\r\n\r\ntree /tmp/passpie -la\r\n# /tmp/passpie\r\n# ├── .keys\r\n# └── github\r\n#     └── octocat.pass\r\n#     └── octocat2.pass\r\n```\r\n\r\n## Contributing\r\n\r\nFeel free to comment, open a bug report or ask for new features on Passpie [issues](https://github.com/marcwebbie/passpie/issues) page or over [Twitter](https://twitter.com/marcwebbie).\r\n\r\nIf you want to contributing with code:\r\n\r\n- Fork the repository [https://github.com/marcwebbie/passpie/fork](https://github.com/marcwebbie/passpie/fork)\r\n- Make sure to add tests\r\n- Create a pull request\r\n- [optional] Read the [Makefile](https://github.com/marcwebbie/passpie/blob/master/Makefile)\r\n\r\n\r\n## Common issues\r\n\r\n### `TypeError: init() got an unexpected keyword argument 'binary'`\r\n\r\nYou probably have the `python-gnupg` package installed. Passpie depends on [isislovecruft](https://github.com/isislovecruft) fork of [python-gnupg](https://github.com/isislovecruft/python-gnupg)\r\n\r\nTo fix:\r\n\r\n```\r\npip uninstall python-gnupg\r\npip install -U passpie\r\n```\r\n\r\n### `'GPG not installed. https://www.gnupg.org/'`\r\n\r\nYou don't have gpg installed or it is not working as expected\r\n\r\nMake sure you have [gpg](https://www.gnupg.org/) installed:\r\n\r\nUbuntu:\r\n\r\n```\r\nsudo apt-get install gpg\r\n```\r\n\r\nOSX:\r\n\r\n```\r\nbrew install gpg\r\n```\r\n\r\n### `xclip or xsel not installed`\r\n\r\nYou don't have copy to clipboard support by default on some linux distributions.\r\n\r\nUbuntu:\r\n\r\n```\r\nsudo apt-get install xclip\r\n```\r\n\r\n### `passpie init hangs`\r\n\r\nSometimes it takes a long time because of entropy on the host machine. It was noticed a long time on an ubuntu server(even more if it is a virtual machine). You could try using `haveged` to generate enough entropy.\r\n\r\nOn ubuntu:\r\n\r\n```\r\nsudo apt-get install haveged\r\n```\r\n\r\n> You could also try this solution right here: http://serverfault.com/questions/214605/gpg-not-enough-entropy\r\n\r\n\r\n## License ([MIT License](http://choosealicense.com/licenses/mit/))\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014-2015 Marc Webbie, <http://github.com/marcwebbie>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a\r\ncopy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-58093107-1","note":"Don't delete this file! It's used internally to help with page regeneration."}