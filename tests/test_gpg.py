# -*- coding: utf-8 -*-
import re

import pytest

from passpie.gpg import (
    KEY_INPUT,
    DEVNULL,
    make_key_input,
    export_keys,
    import_keys,
    list_keys,
    decrypt_data,
    encrypt_data,
)
from passpie.proc import Response


@pytest.fixture
def mock_run(mocker):
    return mocker.patch('passpie.gpg.run')


def test_crypt_make_key_input_create_key_with_expect_values(mocker):
    passphrase = 'passphrase'
    key_length = 2064
    defaults = {}
    defaults["name"] = "Passpie"
    defaults["email"] = "passpie@localhost"
    defaults["comment"] = "Generated by Passpie"
    defaults["expire_date"] = 0
    key_input = KEY_INPUT.format(
        key_length,
        defaults["comment"],
        passphrase,
        defaults["name"],
        defaults["email"],
        defaults["expire_date"],
    )
    expected_return = key_input, {
        'comment': 'Generated by Passpie',
        'name': 'Passpie',
        'passphrase': 'passphrase',
        'expire_date': 0,
        'email': 'passpie@localhost',
        'key_length': 2064,
    }
    assert expected_return == make_key_input(
        key_length=key_length, passphrase=passphrase)


def test_crypt_make_key_input_handles_unicode_encode_error(mocker):
    passphrase = u"L'éphémère"
    key_length = 2064
    key_input = make_key_input(key_length=key_length, passphrase=passphrase)

    assert key_input is not None


def test_crypt_export_keys_calls_gpg_command_on_export_keys(mocker, mock_run):
    mock_run.side_effect = [
        Response(cmd="", std_out="GPG PUBLIC KEY", std_err="", returncode=0),
        Response(cmd="", std_out="GPG PRIVATE KEY", std_err="", returncode=0)
    ]
    mocker.patch('passpie.gpg.which', return_value='gpg')
    homedir = 'mock_homedir'
    fingerprint = 'mock_fingerprint'

    secret = False
    command = [
        'gpg',
        '--no-tty',
        '--batch',
        '--homedir', homedir,
        '--export-secret-keys' if secret else '--export',
        '--armor',
        '-o', '-',
        fingerprint,
    ]
    exported_keys = export_keys(homedir, fingerprint)

    assert mock_run.called is True
    assert exported_keys == "GPG PUBLIC KEY" + "GPG PRIVATE KEY"
    assert mock_run.call_count == 2


def test_encrypt_calls_gpg_encrypt_command_with_recipient(mocker, mock_run):
    mocker.patch('passpie.gpg.which', return_value='gpg')
    recipient = 'passpie@local'
    password = 's3cr3t'
    mock_run.return_value.stdout = '--GPG ENCRYPTED--'
    homedir = 'homedir'
    command = [
        'gpg',
        '--batch',
        '--no-tty',
        '--always-trust',
        '--armor',
        '--recipient', recipient,
        '--homedir', homedir,
        '--encrypt'
    ]
    result = encrypt_data(password, recipient, homedir)

    assert result is not None
    assert mock_run.called
    mock_run.assert_called_once_with(command, data=password)


def test_decrypt_calls_gpg_expected_command(mocker, mock_run):
    mocker.patch('passpie.gpg.which', return_value='gpg')
    recipient = 'passpie@local'
    passphrase = 'passphrase'
    homedir = 'homedir'
    data = '--GPG ENCRYPTED--'
    mock_run.return_value.stdout = 's3cr3t'
    command = [
        'gpg',
        '--batch',
        '--no-tty',
        '--always-trust',
        '--recipient', recipient,
        '--homedir', homedir,
        '--passphrase', passphrase,
        '-o', '-',
        '-d', '-',
    ]
    result = decrypt_data(data, recipient, homedir=homedir, passphrase=passphrase)

    assert result is not None
    assert mock_run.called
    mock_run.assert_called_once_with(command, data=data)


def test_list_keys_calls_expected_command_when_secret_is_true(mocker, mock_run):
    mocker.patch('passpie.gpg.mkdtemp')
    mocker.patch('passpie.gpg.import_keys')
    mocker.patch('passpie.gpg.which', return_value='gpg')
    recipient = list_keys('homedir')

    command = [
        'gpg',
        '--no-tty',
        '--batch',
        '--fixed-list-mode',
        '--with-colons',
        '--homedir', 'homedir',
        "--list-keys",
        '--fingerprint',
    ]

    assert mock_run.called is True
    mock_run.assert_called_once_with(command)
